<PROG> ::= "(" <INSTRCTS>

<INSTRCTS> ::= <INSTRCT> <INSTRCTS> | ")"

<INSTRCT> ::= "(" <FUNC> ")"

<FUNC> ::= <RETFUNC> | <IOFUNC> | <IF> | <LOOP>

<RETFUNC> ::= <LISTFUNC> | <INTFUNC> | <BOOLFUNC>

<LISTFUNC> ::= "CAR" <LIST> | "CDR" <LIST> | "CONS" <LIST> <LIST>

<INTFUNC>  ::= "PLUS" <LIST> <LIST> | "MINUS" <LIST> <LIST> | 
               "MUL" <LIST> <LIST> | "DIV" <LIST> <LIST> | 
               "LENGTH" <LIST>

<BOOLFUNC> ::= "LESS" <LIST> <LIST> | "GREATER" <LIST> <LIST> | "EQUAL" <LIST> <LIST>

<IOFUNC> ::= <SET> | <PRINT>

<SET> ::= "SET" <VAR> <LIST>

<PRINT> ::= "PRINT" <VAR> | "PRINT" <STRING>

# (IF (CONDITION) ((IF-TRUE-INSRCTS)) ((IF_FALSE_INSTRCTS)))

<IF> ::= "IF" "(" <BOOLFUNC> ")" "(" <INSTRCTS> "(" <INSTRCTS>

<LOOP> ::= "WHILE""(" <BOOLFUNC> ")" "(" <INSRCTS>

<LIST> ::= <VAR> | <LITERAL> | "NIL" | "(" <RETFUNC> ")"

# Variables are just A, B, Z etc.

<VAR> ::= [A-Z]

# For printing only:

<STRING> ::= Double-quoted string constant e.g. "Hello, World!", or "FAILURE ?"

# Since lists appear in bracket, to differentiate them
# from instructions, we use ’single’ quotes:

<LITERAL> ::= Single-quoted list e.g. ’(1)’, ’(1 2 3 (4 5))’, or ’2’
